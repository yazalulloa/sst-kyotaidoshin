package receipts

import (
	"fmt"
	"kyotaidoshin/expenses"
	"kyotaidoshin/util"
	"slices"
	"strings"
	"time"
)

templ ReceiptHeader(dto CalculatedReceipt) {
	<p>{ dto.Building.Name }</p>
	<p>{ dto.Building.Rif }</p>
	<p>MES A PAGAR: { strings.ToUpper(dto.MonthStr) }</p>
	<p>{ dto.Receipt.Date.Format(time.DateOnly) }</p>
}

templ AptView(dto CalculatedReceipt, apt AptTotal) {
	<h4 class="text-center font-bold">AVISO DE COBRO</h4>
	<div class="flex flex-col justify-start text-start items-start">
		@ReceiptHeader(dto)
		<p>PROPIETARIO: { apt.Apartment.Name }</p>
		<p>APT: { apt.Apartment.Number }</p>
		for _,amount := range apt.Amounts {
			if slices.Contains(dto.CurrenciesToShowAmountToPay, amount.Currency) {
				<p>VALOR RECIBO: { amount.Currency.Format(amount.Amount) }</p>
			}
		}
		if !dto.Building.FixedPay {
			if slices.Contains(dto.CurrenciesToShowAmountToPay, util.VED) && slices.Contains(dto.CurrenciesToShowAmountToPay, util.USD) {
				<p>
					TASA DE CAMBIO AL DÍA { dto.Rate.DateOfRate.Format(time.DateOnly) } :
					{ util.VED.Format(dto.Rate.Rate) }
				</p>
			}
			<p>ALÍQUOTA: { util.FormatFloat64(apt.Apartment.Aliquot) }</p>
		}
	</div>
	<br/>
	@ExpenseView(dto)
	if len(apt.ExtraCharges) > 0 {
		<div class="break-inside-avoid">
			<p class="text-center font-bold">CARGOS EXTRA</p>
			<div class="grid grid-cols-[8fr_2fr] gap-x-3">
				<span class="font-bold">DESCRIPCIÓN</span>
				<span class="font-bold">MONTO</span>
				for _,extraCharge := range apt.ExtraCharges {
					<span class="text-start">{ extraCharge.Description }</span>
					<span class="text-end px-4">{ util.GetAllowedCurrency(extraCharge.Currency).Format(extraCharge.Amount) }</span>
				}
			</div>
			<br/>
		</div>
	}
	@ReserveFundView(dto)
	@DebtView(dto)
}

templ ExpenseView(dto CalculatedReceipt) {
	<div class="break-inside-avoid">
		<p class="text-center font-bold">GASTOS COMUNES</p>
		<div class="grid grid-cols-[8fr_2fr] gap-x-3">
			<span class="font-bold">DESCRIPCIÓN</span>
			<span class="font-bold">MONTO</span>
			for _,exp := range dto.Expenses {
				if expenses.COMMON.ExpenseIs(exp.Expense) {
					<span class="text-start">{ exp.Expense.Description }</span>
					<span class="text-end px-4">{ util.GetAllowedCurrency(exp.Expense.Currency).Format(exp.Expense.Amount) }</span>
				}
			}
		</div>
		<br/>
		<p class="font-bold text-start">TOTAL GASTOS COMUNES: { dto.TotalCommonExpensesCurrency.Format(dto.TotalCommonExpenses) }</p>
		<br/>
	</div>
	<div class="break-inside-avoid">
		<p class="text-center font-bold">GASTOS NO COMUNES</p>
		<div class="grid grid-cols-[8fr_2fr] gap-x-3">
			<span class="font-bold">DESCRIPCIÓN</span>
			<span class="font-bold">MONTO</span>
			for _,exp := range dto.Expenses {
				if expenses.UNCOMMON.ExpenseIs(exp.Expense) {
					<span class="text-start">{ exp.Expense.Description }</span>
					<span class="text-end px-4">{ util.GetAllowedCurrency(exp.Expense.Currency).Format(exp.Expense.Amount) }</span>
				}
			}
		</div>
		<br/>
		<p class="font-bold text-start">TOTAL GASTOS NO COMUNES: { dto.TotalUnCommonExpensesCurrency.Format(dto.TotalUnCommonExpenses) }</p>
		<br/>
	</div>
}

templ ReserveFundView(dto CalculatedReceipt) {
	<div class="break-inside-avoid whitespace-nowrap">
		<p class="text-center font-bold">MES DE { strings.ToUpper(dto.MonthStr) }/{ fmt.Sprint(dto.Receipt.Year) }</p>
		<div
			class={ "grid gap-x-2",
		templ.KV("grid-cols-4", !dto.ThereIsReserveFundExpense),
		 templ.KV("grid-cols-5", dto.ThereIsReserveFundExpense) }
		>
			<span class="font-bold">PATRIMONIO</span>
			<span class="font-bold">+FACT.MES.ANT</span>
			if dto.ThereIsReserveFundExpense {
				<span class="font-bold">CARGOS</span>
			}
			<span class="font-bold">+FAC.MES.ACT</span>
			<span class="font-bold">SALDO/MES</span>
			for _,fund := range dto.ReserveFunds {
				<span class="text-start">{ fund.Fund.Name } </span>
				<span class="text-end">{ fund.FundFormatted } </span>
				if dto.ThereIsReserveFundExpense {
					<span class="text-end">{ fund.ExpenseFormatted }</span>
				}
				<span class="text-end">{ fund.AmountToPay } </span>
				<span class="text-end">{ fund.NewReserveFund } </span>
			}
		</div>
		<br/>
	</div>
}

templ DebtView(dto CalculatedReceipt) {
	<div class="break-inside-avoid whitespace-nowrap">
		<p class="text-center font-bold">DEUDAS</p>
		{{ debtCurrency := util.GetAllowedCurrency(dto.Building.DebtCurrency) }}
		<div class="grid grid-cols-[1fr_4fr_1fr_2fr_3fr_2fr] gap-x-2">
			<span class="font-bold">APTO</span>
			<span class="font-bold">PROPIETARIO</span>
			<span class="font-bold">RECIBOS</span>
			<span class="font-bold text-end">DEUDA</span>
			<span class="font-bold text-center">MESES</span>
			<span class="font-bold">ABONO</span>
			for _,apt := range dto.Apartments {
				<span class="text-start">{ apt.Apartment.Number }</span>
				<span class="text-start">{ apt.Apartment.Name }</span>
				<span class="text-end">{ fmt.Sprint(apt.Debt.Receipts) }</span>
				<span class="text-end">{ debtCurrency.Format(apt.Debt.Amount) }</span>
				<span class="text-center">{ apt.DebtMonthStr }</span>
				<span class="text-end">{ util.GetAllowedCurrency(apt.Debt.PreviousPaymentAmountCurrency).Format(apt.Debt.PreviousPaymentAmount) }</span>
			}
		</div>
		<br/>
		<p class="font-bold text-start">NÚMERO DE RECIBOS: { fmt.Sprint(dto.DebtReceiptsAmount) }</p>
		<p class="font-bold text-start">DEUDA TOTAL: { debtCurrency.Format(dto.DebtTotal) }</p>
	</div>
}

templ BuildingView(dto CalculatedReceipt) {
	{{ multipleCurrencies := len(dto.CurrenciesToShowAmountToPay) > 1 }}
	{{ mainCurrency := util.GetAllowedCurrency(dto.Building.MainCurrency) }}
	<h4 class="text-center font-bold">AVISO DE COBRO</h4>
	<div class="flex flex-col justify-start text-start items-start">
		<p>{ dto.Building.Name }</p>
		<p>{ dto.Building.Rif }</p>
		<p>MES A PAGAR: { strings.ToUpper(dto.MonthStr) }</p>
		<p>{ dto.Receipt.Date.Format(time.DateOnly) }</p>
		if multipleCurrencies {
			<p>TASA DE CAMBIO AL DÍA:		{ util.VED.Format(dto.Rate.Rate) }</p>
			<p>FECHA DE TASA DE CAMBIO: { dto.Rate.DateOfRate.Format(time.DateOnly) }</p>
		}
	</div>
	<br/>
	<p class="font-bold">LISTADO A PAGAR</p>
	<div
		class={ "grid gap-x-3",
  		templ.KV("grid-cols-[1fr_7fr_2fr]", !multipleCurrencies),
  		 templ.KV("grid-cols-[1fr_7fr_1fr_1fr]", multipleCurrencies) }
	>
		<span class="font-bold">APTO</span>
		<span class="font-bold">PROPIETARIO</span>
		if multipleCurrencies {
			for _,currency := range dto.CurrenciesToShowAmountToPay {
				<span class="font-bold">MONTO { currency.Name() }</span>
			}
		} else {
			<span class="font-bold">MONTO</span>
		}
		for _,aptTotal := range dto.Apartments {
			<span class="text-start">{ aptTotal.Apartment.Number }</span>
			<span class="text-start">{ aptTotal.Apartment.Name }</span>
			if multipleCurrencies {
				for _,currency := range dto.CurrenciesToShowAmountToPay {
					for _,amount := range aptTotal.Amounts {
						if currency == amount.Currency {
							<span class="text-end px-4">{ amount.Currency.Format(amount.Amount) }</span>
						}
					}
				}
			} else {
				for _,amount := range aptTotal.Amounts {
					if mainCurrency == amount.Currency {
						<span class="text-end px-4">{ amount.Currency.Format(amount.Amount) }</span>
					}
				}
			}
		}
	</div>
	<br/>
	<p class="font-bold text-start">TOTAL: { mainCurrency.Format(dto.ApartmentsTotal) }</p>
}

templ Views(key string, dto CalculatedReceipt, idMap map[string]string, tabs string) {
	<div id="pdf-header" hx-swap-oob="beforeend">
		<button
			type="button"
			hx-get={ fmt.Sprintf(_DOWNLOAD_ZIP_FILE+"/%s", key) }
			hx-trigger="mousedown"
			hx-target="this"
			hx-swap="none"
			hx-on:htmx:before-request="this.dispatchEvent(new CustomEvent('event-is-loading'))"
			hx-on:htmx:after-request="this.dispatchEvent(new CustomEvent('event-is-not-loading'))"
			@event-is-loading="isLoading = true"
			@event-is-not-loading="isLoading = false"
			x-data="{isLoading: false}"
			x-bind:disabled="isLoading"
			class="w-fit inline-flex justify-center items-center gap-2 whitespace-nowrap rounded-radius bg-primary border border-primary dark:border-primary-dark px-4 py-2 text-sm font-medium tracking-wide text-on-primary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:bg-primary-dark dark:text-on-primary-dark dark:focus-visible:outline-primary-dark"
		>
			<svg x-bind:data-src="zipFileIconUrl" data-cache="21600" class="size-5"></svg>
			<span x-text="$t('main-action-download-zip')"></span>
			<svg
				x-show="isLoading"
				x-bind:data-src="loadingIconUrl"
				class="size-5 animate-spin motion-reduce:animate-none fill-on-primary dark:fill-on-primary-dark"
			></svg>
		</button>
		<div
			data-tabs={ tabs }
			x-init="
  		$dispatch('event-update-tabs', {tabs: $el.dataset.tabs})
  		$el.remove()
  		"
		></div>
	</div>
	<div
		x-cloak
		x-show={ fmt.Sprintf("selected === '%s'", idMap[dto.Building.ID]) }
		id={ fmt.Sprintf("tabpanel%s", idMap[dto.Building.ID]) }
		role="tabpanel"
		aria-label={ idMap[dto.Building.ID] }
		x-transition.scale.origin.bottom
		class="flex flex-col gap-2"
	>
		<button
			hx-get={ fmt.Sprintf(_DOWNLOAD_PDF_FILE+"/%s", dto.BuildingDownloadKeys) }
			todo-fix-hx-indicator=".htmx-indicator"
			asd-hx-disabled-elt="this"
			hx-trigger="mousedown"
			hx-target="this"
			hx-swap="none"
			type="button"
			class="w-fit inline-flex justify-center items-center gap-2 whitespace-nowrap rounded-radius bg-primary border border-primary dark:border-primary-dark px-4 py-2 text-sm font-medium tracking-wide text-on-primary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:bg-primary-dark dark:text-on-primary-dark dark:focus-visible:outline-primary-dark"
			hx-on:htmx:before-request="this.dispatchEvent(new CustomEvent('event-is-loading'))"
			hx-on:htmx:after-request="this.dispatchEvent(new CustomEvent('event-is-not-loading'))"
			@event-is-loading="isLoading = true"
			@event-is-not-loading="isLoading = false"
			x-data="{isLoading: false}"
			x-bind:disabled="isLoading"
		>
			<svg x-bind:data-src="pdfIconUrl" data-cache="21600" class="size-5"></svg>
			<span class="uppercase" x-text="$t('main-action-download')"></span>
			<span>{ dto.Building.ID }</span>
			<svg
				x-show="isLoading"
				x-bind:data-src="loadingIconUrl"
				class="size-5 animate-spin motion-reduce:animate-none fill-on-primary dark:fill-on-primary-dark"
			></svg>
		</button>
		<div class="bg-white px-6 py-2 text-black">
			@BuildingView(dto)
		</div>
	</div>
	for _,apt := range dto.Apartments {
		<div
			x-show={ fmt.Sprintf("selected === '%s'", idMap[apt.Apartment.Number]) }
			x-transition.scale.origin.bottom
			class="flex flex-col gap-2"
		>
			<button
				hx-get={ fmt.Sprintf(_DOWNLOAD_PDF_FILE+"/%s", apt.DownloadKeys) }
				todo-fix-hx-indicator=".htmx-indicator"
				asd-hx-disabled-elt="this"
				hx-trigger="mousedown"
				hx-target="this"
				hx-swap="none"
				type="button"
				class="w-fit inline-flex justify-center items-center gap-2 whitespace-nowrap rounded-radius bg-primary border border-primary dark:border-primary-dark px-4 py-2 text-sm font-medium tracking-wide text-on-primary transition hover:opacity-75 text-center focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:bg-primary-dark dark:text-on-primary-dark dark:focus-visible:outline-primary-dark"
				hx-on:htmx:before-request="this.dispatchEvent(new CustomEvent('event-is-loading'))"
				hx-on:htmx:after-request="this.dispatchEvent(new CustomEvent('event-is-not-loading'))"
				@event-is-loading="isLoading = true"
				@event-is-not-loading="isLoading = false"
				x-data="{isLoading: false}"
				x-bind:disabled="isLoading"
			>
				<svg x-bind:data-src="pdfIconUrl" data-cache="21600" class="size-5"></svg>
				<span class="uppercase" x-text="$t('main-action-download')"></span>
				<span>{ apt.Apartment.Number }</span>
				<svg
					x-show="isLoading"
					x-bind:data-src="loadingIconUrl"
					class="size-5 animate-spin motion-reduce:animate-none fill-on-primary dark:fill-on-primary-dark"
				></svg>
			</button>
			<div class="bg-white px-6 py-2 text-black">
				@AptView(dto, apt)
			</div>
		</div>
	}
}

templ PrintView(title string, component templ.Component) {
	<!DOCTYPE html>
	<html lang="es">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<script src="https://unpkg.com/@tailwindcss/browser@4"></script>
			<title>AVISO DE COBRO { title }</title>
			<style>

          @media print {
            @page {
              margin: 0.25cm;
            }

             html, body {
               font-size: 10pt;
             }
          }
			</style>
		</head>
		<body class="bg-white px-1 py-1 text-black">
			@component
		</body>
	</html>
}
