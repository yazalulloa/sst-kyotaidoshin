package receipts

import (
	"fmt"
	"github.com/google/uuid"
	"kyotaidoshin/api"
	"kyotaidoshin/debts"
	"kyotaidoshin/expenses"
	"kyotaidoshin/extraCharges"
	"kyotaidoshin/reserveFunds"
	"kyotaidoshin/util"
	"time"
)

templ InitView(dto InitDto) {
	if dto.UploadBackupParams != nil {
		@api.UploadBackupForm(*dto.UploadBackupParams)
	}
	<div
		x-init={ fmt.Sprintf("buildings = %s; $el.remove()", dto.BuildingIds) }
	></div>
}

templ BuildingIdsView(ids string) {
	<div
		x-init={ fmt.Sprintf("buildings = %s; $el.remove()", ids) }
	></div>
}

templ Search(res TableResponse) {
	for _, item := range res.Results {
		@ItemView(item)
	}
	if res.NextPageUrl != "" {
		@api.NextPageLi(res.NextPageUrl, templ.Attributes{
			"hx-include": "[name='building_input'],[name='month_input'],[name='year_input']"})
	}
	@CountersView(res.Counters)
}

templ ItemView(item Item) {
	{{ hasWritePerm := api.HasPerms(ctx, api.RECEIPTS_WRITE) }}
	<li
		id={ item.CardId }
		class="fade-me-in fade-me-out"
		if item.isUpdate {
			hx-swap-oob="true"
		}
		if hasWritePerm && false {
			@dblclick={ fmt.Sprintf("window.location.href = '/receipts/edit/%s'", item.Key) }
		}
	>
		<span>{ item.Item.BuildingID }</span>
		<span x-text={ fmt.Sprintf("$t('main-months-%d')", item.Item.Month) }></span>
		<span>{ fmt.Sprint(item.Item.Year) }</span>
		<span>{ item.Item.Date.Format(time.DateOnly) }</span>
		<div class="flex justify-center">
			if item.Item.LastSent != nil {
				{{
		tooltipId := "tooltip-" + uuid.New().String()
		lastSent := fmt.Sprint(*item.LastSent)
				}}
				@api.BadgeIndicatorWithTooltip(item.Item.Sent, tooltipId, api.SpanWitX_Text("$t('main-title-sent')"), api.Tooltip(tooltipId, api.SpanFormatDate(lastSent)))
			} else {
				@api.BadgeIndicatorWithTooltip(item.Item.Sent, "", api.SpanWitX_Text("$t('main-title-sent')"), nil)
			}
		</div>
		@api.SpanFormatDate(fmt.Sprint(item.CreatedAt))
		<div class="flex justify-center">
			<div
				x-data="{ isOpen: false, openedWithKeyboard: false }"
				x-on:keydown.esc.window="isOpen = false, openedWithKeyboard = false"
				class="relative w-fit"
			>
				<!-- Toggle Button -->
				<button
					type="button"
					aria-label="context menu"
					x-on:click="isOpen = ! isOpen"
					x-on:keydown.space.prevent="openedWithKeyboard = true"
					x-on:keydown.enter.prevent="openedWithKeyboard = true"
					x-on:keydown.down.prevent="openedWithKeyboard = true"
					class="inline-flex items-center bg-transparent transition hover:opacity-75 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-outline-strong active:opacity-100 dark:focus-visible:outline-outline-dark-strong"
					x-bind:class="isOpen || openedWithKeyboard ? 'text-on-surface-strong dark:text-on-surface-dark-strong' : 'text-on-surface dark:text-on-surface-dark'"
					x-bind:aria-expanded="isOpen || openedWithKeyboard"
					aria-haspopup="true"
				>
					<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" fill="currentColor" class="w-8 h-8">
						<path fill-rule="evenodd" d="M4.5 12a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zm6 0a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zm6 0a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z" clip-rule="evenodd"></path>
					</svg>
				</button>
				<!-- Dropdown Menu -->
				<div
					x-cloak
					x-show="isOpen || openedWithKeyboard"
					x-transition
					x-trap="openedWithKeyboard"
					x-on:click.outside="isOpen = false, openedWithKeyboard = false"
					x-on:keydown.down.prevent="$focus.wrap().next()"
					x-on:keydown.up.prevent="$focus.wrap().previous()"
					class="z-40 absolute right-full mr-1 top-0 flex w-fit min-w-48 flex-col divide-y divide-outline overflow-hidden rounded-radius border border-outline bg-surface-alt dark:divide-outline-dark dark:border-outline-dark dark:bg-surface-dark-alt"
					role="menu"
				>
					<!-- Dropdown Section -->
					<div class="flex flex-col py-1.5">
						if hasWritePerm {
							<a
								hx-delete={ fmt.Sprintf(_PATH+"/%s", item.Key) }
								hx-target={ "#" + item.CardId }
								if !util.IsDevMode() {
									hx-headers={ util.CrsfHeaders(ctx) }
								}
								hx-indicator=".htmx-indicator"
								hx-include="[name='building_input'],[name='month_input'],[name='year_input']"
								hx-disabled-elt="this"
								hx-trigger="mousedown"
								hx-swap="delete swap:300ms"
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<div class="rounded-full border border-danger p-1 text-danger dark:border-danger dark:text-danger">
									<svg x-bind:data-src="deleteIconUrl" data-cache="21600" class="size-3"></svg>
								</div>
								<span x-text="$t('main-action-delete')"></span>
							</a>
							<a
								href={ templ.URL(fmt.Sprintf("/receipts/edit/%s", item.Key)) }
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<div class="rounded-full border border-success p-1 text-success dark:border-success dark:text-success">
									<svg x-bind:data-src="editIconUrl" data-cache="21600" class="size-3"></svg>
								</div>
								<span x-text="$t('main-action-edit')"></span>
							</a>
							<a
								hx-post={ fmt.Sprintf(_DUPLICATE+"/%s", item.Key) }
								hx-indicator=".htmx-indicator"
								hx-disabled-elt="this"
								hx-trigger="mousedown"
								hx-target="#default-anchor"
								hx-swap="innerHTML"
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<svg x-bind:data-src="duplicateIconUrl" data-cache="21600" class="size-5"></svg>
								<span x-text="$t('main-action-copy')"></span>
							</a>
						}
						<a
							href={ templ.URL(fmt.Sprintf("/receipts/view/%s", item.Key)) }
							class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
							role="menuitem"
						>
							<svg x-bind:data-src="receiptIconUrl" data-cache="21600" class="size-5"></svg>
							<span x-text="$t('main-action-view-receipts')"></span>
						</a>
						<a
							hx-get={ fmt.Sprintf(_DOWNLOAD_ZIP_FILE+"/%s", item.Key) }
							todo-fix-hx-indicator=".htmx-indicator"
							todo-fix-hx-disabled-elt="this"
							hx-trigger="mousedown"
							hx-target="this"
							hx-swap="none"
							class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
							hx-on:htmx:before-request="this.dispatchEvent(new CustomEvent('event-is-loading'))"
							hx-on:htmx:after-request="this.dispatchEvent(new CustomEvent('event-is-not-loading'))"
							@event-is-loading="isLoading = true"
							@event-is-not-loading="isLoading = false"
							x-data="{
                    			 isLoading: false,
                    			}"
							x-bind:disabled="isLoading"
							role="menuitem"
						>
							<svg x-bind:data-src="zipFileIconUrl" data-cache="21600" class="size-5"></svg>
							<span x-text="$t('main-action-download-zip')"></span>
							<svg
								x-show="isLoading"
								x-bind:data-src="loadingIconUrl"
								class="size-5 animate-spin motion-reduce:animate-none fill-on-primary dark:fill-on-primary-dark"
							></svg>
						</a>
						if hasWritePerm {
							<a
								hx-get={ fmt.Sprintf(_SEND_PDFS+"/%s", item.Key) }
								hx-indicator=".htmx-indicator"
								hx-disabled-elt="this"
								hx-trigger="mousedown"
								hx-swap="none"
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<svg x-bind:data-src="sendMailIconUrl" data-cache="21600" class="size-5"></svg>
								<span x-text="$t('main-action-send-pdfs-now')"></span>
							</a>
							<button
								data-params={ item.UpdateParams }
								@click="
            						    isOpen = false;
            						    $dispatch('event-open-send-dialog', { params: $el.dataset.params })
            						  "
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<svg x-bind:data-src="sendMailIconUrl" data-cache="21600" class="size-5"></svg>
								<span x-text="$t('main-action-send-pdfs')"></span>
							</button>
						}
						<a
							hx-get={ fmt.Sprintf(_DOWNLOAD_HTML_FILE+"/%s", item.Key) }
							hx-indicator=".htmx-indicator"
							hx-disabled-elt="this"
							hx-trigger="mousedown"
							hx-target="#anchor-download-html"
							hx-swap="innerHTML"
							class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
							role="menuitem"
						>
							<div hidden="hidden" id="anchor-download-html"></div>
							<svg x-bind:data-src="sendMailIconUrl" data-cache="21600" class="size-5"></svg>
							<span x-text="$t('main-action-download-html')"></span>
						</a>
					</div>
				</div>
			</div>
		</div>
	</li>
}

templ CountersView(counters Counters) {
	<div
		id="receipts-counters"
		hidden="hidden"
		hx-swap-oob="true"
		data-total-count={ fmt.Sprint(counters.TotalCount) }
		if counters.QueryCount != nil {
			data-query-count={ fmt.Sprint(*counters.QueryCount) }
		}
		x-init="
	total = $el.getAttribute('data-total-count');
	query = $el.getAttribute('data-query-count');
	"
	></div>
}

templ YearsView(init string) {
	<div x-init={ init }></div>
}

templ FormView(dto FormDto) {
	@api.CSRF()
	<input type="hidden" name="key" value={ dto.key }/>
	<div
		hidden="hidden"
		data-main-currency={ dto.building.MainCurrency }
		data-debt-currency={ dto.building.DebtCurrency }
		data-params={ dto.updateParams }
		data-apts={ dto.apts }
		x-init="
		$dispatch('event-receipt-form-update', { params: $el.getAttribute('data-params') });

		mainCurrency = $el.getAttribute('data-main-currency');
    debtCurrency = $el.getAttribute('data-debt-currency');

		let base64 = $el.getAttribute('data-apts');
    let decodedString = atob(base64);
    let array = JSON.parse(decodedString);

    array.forEach((apt) => {
        apartments.push(apt);
    });

    apartments.forEach((apt) => {
      aptMap.set(apt.number, apt.name);
    });

    $el.remove();
		"
	></div>
	<div id="receiptRateSelect" hx-swap-oob="innerHTML">
		for _, rate := range dto.rates {
			<option
				value={ rate.Key }
				if rate.ID == dto.receipt.RateID {
					selected
				}
			>
				<span>{ rate.DateOfRate }</span>&nbsp;&nbsp;&nbsp;<span>{ util.FormatFloat64(rate.Rate) }</span>
			</option>
		}
	</div>
	@expenses.FormView(dto.expenseFormDto)
	@reserveFunds.FormView(dto.reserveFundFormDto)
	@extraCharges.FormView(dto.extraChargesFormDto)
	@debts.FormView(dto.debtFormDto)
	@expenses.ReserveFundExpensesView(dto.reserveFundExpenses)
	@expenses.ExpenseTotalsView(dto.expenseTotals)
}

templ FormResponseView(res FormResponse) {
	<div
		data-response-err={ res.errorStr }
		x-init="
errMsg = $el.getAttribute('data-response-err');

if (errMsg === '') {
let form = $el.closest('form')
form.classList.add('border', 'border-success');
await sleep(3000);
form.classList.remove('border', 'border-success');
}

"
	></div>
}

templ SendPdfsView(progressId string, closeModal bool) {
	<div id="receipts-email-progress" hx-swap-oob="beforeend">
		<div
			class="pb-2 w-full flex justify-center"
			x-data={ fmt.Sprintf("{ url: '%s/%s' }", _SEND_PDFS_PROGRESS, progressId) }
		>
			<div
				x-bind:hx-get="receiptSendProgressPartialUrl"
				hx-trigger="load"
				hx-swap="outerHTML"
			></div>
		</div>
	</div>
	if closeModal {
		<div x-init="modalIsOpen = false"></div>
	}
}

templ SendPdfsProgressView(update string) {
	<div
		data-progress-update={ update }
		x-init="$dispatch('event-update-params', { params: $el.getAttribute('data-progress-update') });"
	></div>
}

templ ShowNewReceiptsDialog(encoded string) {
	<div id="receipts-dialog-content" hx-swap-oob="innerHTML">
		<div
			data-params={ encoded }
			x-init="$dispatch('event-receipt-form-update', { params: $el.dataset.params })
		  $el.remove()
		"
		></div>
	</div>
}

templ SendAptsView(encoded string) {
	<div
		data-apts={ encoded }
		x-init="
	 $dispatch('event-update-apts', { apts: $el.getAttribute('data-apts') });
	$el.remove();
	 "
	></div>
}
