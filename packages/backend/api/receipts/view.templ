package receipts

import (
	"fmt"
	"github.com/google/uuid"
	"kyotaidoshin/api"
	"kyotaidoshin/expenses"
	"kyotaidoshin/extraCharges"
	"kyotaidoshin/reserveFunds"
	"kyotaidoshin/util"
	"time"
)

templ InitView(dto InitDto) {
	if dto.UploadBackupParams != nil {
		@api.UploadBackupForm(*dto.UploadBackupParams)
	}
	<div
		x-init={ fmt.Sprintf("buildings = %s; $el.remove()", dto.BuildingIds) }
	></div>
}

templ Search(res TableResponse) {
	for _, item := range res.Results {
		@ItemView(item)
	}
	if res.NextPageUrl != "" {
		@api.NextPageLi(res.NextPageUrl, templ.Attributes{
			"hx-include": "[name='building_input'],[name='month_input'],[name='year_input']"})
	}
	@CountersView(res.Counters)
}

templ ItemView(item Item) {
	<li
		id={ item.CardId }
		class="fade-me-in fade-me-out"
		if item.isUpdate {
			hx-swap-oob="true"
		}
		@dblclick={ fmt.Sprintf("window.location.href = '/receipts/edit/%s'", item.Key) }
	>
		<span>{ item.Item.BuildingID }</span>
		<span x-text={ fmt.Sprintf("$t('main-months-%d')", item.Item.Month) }></span>
		<span>{ fmt.Sprint(item.Item.Year) }</span>
		<span>{ item.Item.Date.Format(time.DateOnly) }</span>
		<div class="flex justify-center w-full">
			if item.Item.LastSent != nil {
				{{
		tooltipId := "tooltip-" + uuid.New().String()
		lastSent := fmt.Sprint(*item.LastSent)
				}}
				@api.BadgeIndicatorWithTooltip(item.Item.Sent, tooltipId, api.SpanWitX_Text("$t('main-title-sent')"), api.Tooltip(tooltipId, api.SpanFormatDate(lastSent)))
			}
		</div>
		<span
			data-date={ fmt.Sprint(item.CreatedAt) }
			x-init="
    					$el.innerHTML = new Date(parseInt($el.getAttribute('data-date')))
                                          //.toLocaleDateString()
                                         .toLocaleString()
                                         "
		></span>
		@api.DeleteBtn(fmt.Sprintf(_PATH+"/%s", item.Key), item.CardId, templ.Attributes{
			"hx-include": "[name='building_input'],[name='month_input'],[name='year_input']"})
	</li>
}

templ CountersView(counters Counters) {
	<div
		id="receipts-counters"
		hidden="hidden"
		hx-swap-oob="true"
		data-total-count={ fmt.Sprint(counters.TotalCount) }
		if counters.QueryCount != nil {
			data-query-count={ fmt.Sprint(*counters.QueryCount) }
		}
		x-init="
	total = $el.getAttribute('data-total-count');
	query = $el.getAttribute('data-query-count');
	"
	></div>
}

templ YearsView(init string) {
	<div x-init={ init }></div>
}

templ FormView(dto FormDto) {
	@api.CSRF()
	<input type="hidden" name="key" value={ dto.key }/>
	<div
		hidden="hidden"
		data-params={ dto.updateParams }
		data-apts={ dto.apts }
		x-init="
		$dispatch('event-receipt-form-update', { params: $el.getAttribute('data-params') });

		let base64 = $el.getAttribute('data-apts');
    let decodedString = atob(base64);
    let array = JSON.parse(decodedString);

    array.forEach((apt) => {
        apartments.push(apt);
    });

    apartments.forEach((apt) => {
      aptMap.set(apt.number, apt.name);
    });

    $el.remove();
		"
	></div>
	<div id="receiptRateSelect" hx-swap-oob="innerHTML">
		for _, rate := range dto.rates {
			<option
				value={ rate.Key }
				if rate.ID == dto.receipt.RateID {
					selected
				}
			>
				<span>{ rate.DateOfRate }</span>&nbsp;&nbsp;&nbsp;<span>{ util.FormatFloat64(rate.Rate) }</span>
			</option>
		}
	</div>
	@expenses.FormView(dto.expenseFormDto)
	@reserveFunds.FormView(dto.reserveFundFormDto)
	@extraCharges.FormView(dto.extraChargesFormDto)
}

templ FormResponseView(res FormResponse) {
	<div
		data-response-err={ res.errorStr }
		x-init="
errMsg = $el.getAttribute('data-response-err');

if (errMsg === '') {
let form = $el.closest('form')
form.classList.add('border', 'border-success');
await sleep(3000);
form.classList.remove('border', 'border-success');
}

"
	></div>
}
