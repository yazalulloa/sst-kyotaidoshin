package receipts

import (
	"fmt"
	"github.com/google/uuid"
	"kyotaidoshin/api"
	"kyotaidoshin/debts"
	"kyotaidoshin/expenses"
	"kyotaidoshin/extraCharges"
	"kyotaidoshin/reserveFunds"
	"kyotaidoshin/util"
	"time"
)

templ InitView(dto InitDto) {
	if dto.UploadBackupParams != nil {
		@api.UploadBackupForm(*dto.UploadBackupParams)
	}
	<div
		x-init={ fmt.Sprintf("buildings = %s; $el.remove()", dto.BuildingIds) }
	></div>
}

templ Search(res TableResponse) {
	for _, item := range res.Results {
		@ItemView(item)
	}
	if res.NextPageUrl != "" {
		@api.NextPageLi(res.NextPageUrl, templ.Attributes{
			"hx-include": "[name='building_input'],[name='month_input'],[name='year_input']"})
	}
	@CountersView(res.Counters)
}

templ ItemView(item Item) {
	<li
		id={ item.CardId }
		class="fade-me-in fade-me-out"
		if item.isUpdate {
			hx-swap-oob="true"
		}
		if false {
			@dblclick={ fmt.Sprintf("window.location.href = '/receipts/edit/%s'", item.Key) }
		}
	>
		<span>{ item.Item.BuildingID }</span>
		<span x-text={ fmt.Sprintf("$t('main-months-%d')", item.Item.Month) }></span>
		<span>{ fmt.Sprint(item.Item.Year) }</span>
		<span>{ item.Item.Date.Format(time.DateOnly) }</span>
		<div class="flex justify-center w-full">
			if item.Item.LastSent != nil {
				{{
		tooltipId := "tooltip-" + uuid.New().String()
		lastSent := fmt.Sprint(*item.LastSent)
				}}
				@api.BadgeIndicatorWithTooltip(item.Item.Sent, tooltipId, api.SpanWitX_Text("$t('main-title-sent')"), api.Tooltip(tooltipId, api.SpanFormatDate(lastSent)))
			} else {
				@api.BadgeIndicatorWithTooltip(item.Item.Sent, "", api.SpanWitX_Text("$t('main-title-sent')"), nil)
			}
		</div>
		<span
			data-date={ fmt.Sprint(item.CreatedAt) }
			x-init="
    					$el.innerHTML = new Date(parseInt($el.getAttribute('data-date')))
                                          //.toLocaleDateString()
                                         .toLocaleString()
                                         "
		></span>
		if false {
			<div class="flex flex-row flex-wrap gap-4 justify-center items-center">
				<a href={ templ.URL(fmt.Sprintf("/receipts/edit/%s", item.Key)) }>
					<button
						type="button"
						class="whitespace-nowrap bg-transparent rounded-full border border-success p-1 text-sm font-medium tracking-wide text-success transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-success active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-success-dark dark:text-success-dark dark:focus-visible:outline-success-dark"
					>
						<svg x-bind:data-src="editIconUrl" data-cache="21600" class="h-6 w-6"></svg>
					</button>
				</a>
				@api.DeleteBtn(fmt.Sprintf(_PATH+"/%s", item.Key), item.CardId, templ.Attributes{
					"hx-include": "[name='building_input'],[name='month_input'],[name='year_input']"})
				<a href={ templ.URL(fmt.Sprintf("/receipts/view/%s", item.Key)) }>
					<button
						type="button"
						class="whitespace-nowrap bg-transparent rounded-full border border-success p-1 text-sm font-medium tracking-wide text-success transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-success active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-success-dark dark:text-success-dark dark:focus-visible:outline-success-dark"
					>
						<svg x-bind:data-src="editIconUrl" data-cache="21600" class="h-6 w-6"></svg>
					</button>
				</a>
			</div>
		} else {
			<div class="w-full flex justify-center">
				<div
					x-data="{ isOpen: false, openedWithKeyboard: false }"
					x-on:keydown.esc.window="isOpen = false, openedWithKeyboard = false"
					class="relative w-fit"
				>
					<!-- Toggle Button -->
					<button
						type="button"
						aria-label="context menu"
						x-on:click="isOpen = ! isOpen"
						x-on:keydown.space.prevent="openedWithKeyboard = true"
						x-on:keydown.enter.prevent="openedWithKeyboard = true"
						x-on:keydown.down.prevent="openedWithKeyboard = true"
						class="inline-flex items-center bg-transparent transition hover:opacity-75 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-outline-strong active:opacity-100 dark:focus-visible:outline-outline-dark-strong"
						x-bind:class="isOpen || openedWithKeyboard ? 'text-on-surface-strong dark:text-on-surface-dark-strong' : 'text-on-surface dark:text-on-surface-dark'"
						x-bind:aria-expanded="isOpen || openedWithKeyboard"
						aria-haspopup="true"
					>
						<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" fill="currentColor" class="w-8 h-8">
							<path fill-rule="evenodd" d="M4.5 12a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zm6 0a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0zm6 0a1.5 1.5 0 113 0 1.5 1.5 0 01-3 0z" clip-rule="evenodd"></path>
						</svg>
					</button>
					<!-- Dropdown Menu -->
					<div
						x-cloak
						x-show="isOpen || openedWithKeyboard"
						x-transition
						x-trap="openedWithKeyboard"
						x-on:click.outside="isOpen = false, openedWithKeyboard = false"
						x-on:keydown.down.prevent="$focus.wrap().next()"
						x-on:keydown.up.prevent="$focus.wrap().previous()"
						class="z-40 absolute right-full mr-1 top-0 flex w-fit min-w-48 flex-col divide-y divide-outline overflow-hidden rounded-radius border border-outline bg-surface-alt dark:divide-outline-dark dark:border-outline-dark dark:bg-surface-dark-alt"
						role="menu"
					>
						<!-- Dropdown Section -->
						<div class="flex flex-col py-1.5">
							<a
								hx-delete={ fmt.Sprintf(_PATH+"/%s", item.Key) }
								hx-target={ "#" + item.CardId }
								if !util.IsDevMode() {
									hx-headers={ util.CrsfHeaders(ctx) }
								}
								hx-indicator=".htmx-indicator"
								hx-include="[name='building_input'],[name='month_input'],[name='year_input']"
								hx-disabled-elt="this"
								hx-trigger="mousedown"
								hx-swap="delete swap:300ms"
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<div class="rounded-full border border-danger p-1 text-danger dark:border-danger dark:text-danger">
									<svg x-bind:data-src="deleteIconUrl" data-cache="21600" class="size-3"></svg>
								</div>
								<span x-text="$t('main-action-delete')"></span>
							</a>
							<a
								href={ templ.URL(fmt.Sprintf("/receipts/edit/%s", item.Key)) }
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<div class="rounded-full border border-success p-1 text-success dark:border-success dark:text-success">
									<svg x-bind:data-src="editIconUrl" data-cache="21600" class="size-3"></svg>
								</div>
								<span x-text="$t('main-action-edit')"></span>
							</a>
							<a
								href={ templ.URL(fmt.Sprintf("/receipts/view/%s", item.Key)) }
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<svg x-bind:data-src="receiptIconUrl" data-cache="21600" class="size-5"></svg>
								<span x-text="$t('main-action-view-receipts')"></span>
							</a>
							<a
								hx-get={ fmt.Sprintf(_DOWNLOAD_ZIP_FILE+"/%s", item.Key) }
								todo-fix-hx-indicator=".htmx-indicator"
								todo-fix-hx-disabled-elt="this"
								hx-trigger="mousedown"
								hx-target="this"
								hx-swap="none"
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								hx-on:htmx:before-request="this.dispatchEvent(new CustomEvent('event-is-loading'))"
								hx-on:htmx:after-request="this.dispatchEvent(new CustomEvent('event-is-not-loading'))"
								@event-is-loading="isLoading = true"
								@event-is-not-loading="isLoading = false"
								x-data="{
                			 isLoading: false,
                			}"
								x-bind:disabled="isLoading"
								role="menuitem"
							>
								<svg x-bind:data-src="zipFileIconUrl" data-cache="21600" class="size-5"></svg>
								<span x-text="$t('main-action-download-zip')"></span>
								<svg
									x-show="isLoading"
									x-bind:data-src="loadingIconUrl"
									class="size-5 animate-spin motion-reduce:animate-none fill-on-primary dark:fill-on-primary-dark"
								></svg>
							</a>
							<a
								hx-get={ fmt.Sprintf(_SEND_PDFS+"/%s", item.Key) }
								hx-indicator=".htmx-indicator"
								hx-disabled-elt="this"
								hx-trigger="mousedown"
								hx-swap="none"
								class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong"
								role="menuitem"
							>
								<svg x-bind:data-src="sendMailIconUrl" data-cache="21600" class="size-5"></svg>
								<span x-text="$t('main-action-send-pdfs-now')"></span>
							</a>
						</div>
						<!-- Dropdown Section -->
						<div class="flex flex-col py-1.5">
							<a href="#" class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong" role="menuitem">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" fill="currentColor" class="size-4">
									<path fill-rule="evenodd" d="M7.5 6a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM3.751 20.105a8.25 8.25 0 0116.498 0 .75.75 0 01-.437.695A18.683 18.683 0 0112 22.5c-2.786 0-5.433-.608-7.812-1.7a.75.75 0 01-.437-.695z" clip-rule="evenodd"></path>
								</svg>
								Profile
							</a>
							<a href="#" class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong" role="menuitem">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" fill="currentColor" class="size-4">
									<path fill-rule="evenodd" d="M11.078 2.25c-.917 0-1.699.663-1.85 1.567L9.05 4.889c-.02.12-.115.26-.297.348a7.493 7.493 0 00-.986.57c-.166.115-.334.126-.45.083L6.3 5.508a1.875 1.875 0 00-2.282.819l-.922 1.597a1.875 1.875 0 00.432 2.385l.84.692c.095.078.17.229.154.43a7.598 7.598 0 000 1.139c.015.2-.059.352-.153.43l-.841.692a1.875 1.875 0 00-.432 2.385l.922 1.597a1.875 1.875 0 002.282.818l1.019-.382c.115-.043.283-.031.45.082.312.214.641.405.985.57.182.088.277.228.297.35l.178 1.071c.151.904.933 1.567 1.85 1.567h1.844c.916 0 1.699-.663 1.85-1.567l.178-1.072c.02-.12.114-.26.297-.349.344-.165.673-.356.985-.57.167-.114.335-.125.45-.082l1.02.382a1.875 1.875 0 002.28-.819l.923-1.597a1.875 1.875 0 00-.432-2.385l-.84-.692c-.095-.078-.17-.229-.154-.43a7.614 7.614 0 000-1.139c-.016-.2.059-.352.153-.43l.84-.692c.708-.582.891-1.59.433-2.385l-.922-1.597a1.875 1.875 0 00-2.282-.818l-1.02.382c-.114.043-.282.031-.449-.083a7.49 7.49 0 00-.985-.57c-.183-.087-.277-.227-.297-.348l-.179-1.072a1.875 1.875 0 00-1.85-1.567h-1.843zM12 15.75a3.75 3.75 0 100-7.5 3.75 3.75 0 000 7.5z" clip-rule="evenodd"></path>
								</svg>
								Settings
							</a>
						</div>
						<!-- Dropdown Section -->
						<div class="flex flex-col py-1.5">
							<a href="#" class="flex items-center gap-2 bg-surface-alt px-4 py-2 text-sm text-on-surface hover:bg-surface-dark-alt/5 hover:text-on-surface-strong focus-visible:bg-surface-dark-alt/10 focus-visible:text-on-surface-strong focus-visible:outline-hidden dark:bg-surface-dark-alt dark:text-on-surface-dark dark:hover:bg-surface-alt/5 dark:hover:text-on-surface-dark-strong dark:focus-visible:bg-surface-alt/10 dark:focus-visible:text-on-surface-dark-strong" role="menuitem">
								<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" aria-hidden="true" fill="currentColor" class="size-4">
									<path d="M12 .75a8.25 8.25 0 00-4.135 15.39c.686.398 1.115 1.008 1.134 1.623a.75.75 0 00.577.706c.352.083.71.148 1.074.195.323.041.6-.218.6-.544v-4.661a6.714 6.714 0 01-.937-.171.75.75 0 11.374-1.453 5.261 5.261 0 002.626 0 .75.75 0 11.374 1.452 6.712 6.712 0 01-.937.172v4.66c0 .327.277.586.6.545.364-.047.722-.112 1.074-.195a.75.75 0 00.577-.706c.02-.615.448-1.225 1.134-1.623A8.25 8.25 0 0012 .75z"></path>
									<path fill-rule="evenodd" d="M9.013 19.9a.75.75 0 01.877-.597 11.319 11.319 0 004.22 0 .75.75 0 11.28 1.473 12.819 12.819 0 01-4.78 0 .75.75 0 01-.597-.876zM9.754 22.344a.75.75 0 01.824-.668 13.682 13.682 0 002.844 0 .75.75 0 11.156 1.492 15.156 15.156 0 01-3.156 0 .75.75 0 01-.668-.824z" clip-rule="evenodd"></path>
								</svg>
								Help Center
							</a>
						</div>
					</div>
				</div>
			</div>
		}
	</li>
}

templ CountersView(counters Counters) {
	<div
		id="receipts-counters"
		hidden="hidden"
		hx-swap-oob="true"
		data-total-count={ fmt.Sprint(counters.TotalCount) }
		if counters.QueryCount != nil {
			data-query-count={ fmt.Sprint(*counters.QueryCount) }
		}
		x-init="
	total = $el.getAttribute('data-total-count');
	query = $el.getAttribute('data-query-count');
	"
	></div>
}

templ YearsView(init string) {
	<div x-init={ init }></div>
}

templ FormView(dto FormDto) {
	@api.CSRF()
	<input type="hidden" name="key" value={ dto.key }/>
	<div
		hidden="hidden"
		data-main-currency={ dto.building.MainCurrency }
		data-debt-currency={ dto.building.DebtCurrency }
		data-params={ dto.updateParams }
		data-apts={ dto.apts }
		x-init="
		$dispatch('event-receipt-form-update', { params: $el.getAttribute('data-params') });

		mainCurrency = $el.getAttribute('data-main-currency');
    debtCurrency = $el.getAttribute('data-debt-currency');

		let base64 = $el.getAttribute('data-apts');
    let decodedString = atob(base64);
    let array = JSON.parse(decodedString);

    array.forEach((apt) => {
        apartments.push(apt);
    });

    apartments.forEach((apt) => {
      aptMap.set(apt.number, apt.name);
    });

    $el.remove();
		"
	></div>
	<div id="receiptRateSelect" hx-swap-oob="innerHTML">
		for _, rate := range dto.rates {
			<option
				value={ rate.Key }
				if rate.ID == dto.receipt.RateID {
					selected
				}
			>
				<span>{ rate.DateOfRate }</span>&nbsp;&nbsp;&nbsp;<span>{ util.FormatFloat64(rate.Rate) }</span>
			</option>
		}
	</div>
	@expenses.FormView(dto.expenseFormDto)
	@reserveFunds.FormView(dto.reserveFundFormDto)
	@extraCharges.FormView(dto.extraChargesFormDto)
	@debts.FormView(dto.debtFormDto)
	@expenses.ReserveFundExpensesView(dto.reserveFundExpenses)
	@expenses.ExpenseTotalsView(dto.expenseTotals)
}

templ FormResponseView(res FormResponse) {
	<div
		data-response-err={ res.errorStr }
		x-init="
errMsg = $el.getAttribute('data-response-err');

if (errMsg === '') {
let form = $el.closest('form')
form.classList.add('border', 'border-success');
await sleep(3000);
form.classList.remove('border', 'border-success');
}

"
	></div>
}

templ SendPdfsView(progressId string) {
	<div id="receipts-email-progress" hx-swap-oob="beforeend">
		<div
			class="pb-2 w-full flex justify-center"
			x-data={ fmt.Sprintf("{ url: '%s/%s' }", _SEND_PDFS_PROGRESS, progressId) }
		>
			<div
				x-bind:hx-get="receiptSendProgressPartialUrl"
				hx-trigger="load"
				hx-swap="outerHTML"
			></div>
		</div>
	</div>
}

templ SendPdfsProgressView(update string) {
	<div
		data-progress-update={ update }
		x-init="$dispatch('event-update-params', { params: $el.getAttribute('data-progress-update') });"
	></div>
}

templ UploadFormView(params util.UploadBackupParams) {
	<div
		hidden="hidden"
		data-url={ params.Url }
		x-init="url = $el.dataset.url"
	></div>
	for k, v := range params.Values {
		<input type="hidden" name={ k } value={ v }/>
	}
}

templ ShowNewReceiptsDialog(encoded string) {
	<div id="receipts-dialog-content" hx-swap-oob="innerHTML">
		<div
			data-params={ encoded }
			x-init="$dispatch('event-receipt-form-update', { params: $el.dataset.params })
		  $el.remove()
		"
		></div>
	</div>
}
