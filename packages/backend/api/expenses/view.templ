package expenses

import (
	"fmt"
	"kyotaidoshin/api"
	"kyotaidoshin/util"
	"strings"
)

templ FormView(dto FormDto) {
	<div id="expenses-list" hx-swap-oob="innerHTML">
		for _, item := range dto.Items {
			if item.UpdateParams != nil {
				@ItemView(item)
			}
		}
		<div
			data-restart-key={ dto.Key }
			x-init="
      		restartKey = $el.getAttribute('data-restart-key');
      		key = restartKey
      		$el.remove()
      		"
		></div>
	</div>
}

templ ItemView(item Item) {
	<li
		id={ item.CardId }
		class="fade-me-in fade-me-out hover:opacity-75"
		if item.isUpdate != nil && *item.isUpdate {
			hx-swap-oob="true"
		}
		if item.UpdateParams != nil {
			data-update-params={ *item.UpdateParams }
			@click="$dispatch('event-expense-form-update', { params: $el.getAttribute('data-update-params') })"
		}
	>
		<span class="text-start">{ item.Item.Description }</span>
		@api.SpanFormatCurrency(item.Item.Amount, item.Item.Currency)
		<span x-text={ fmt.Sprintf("$t('main-title-%s')", strings.ToLower(item.Item.Type)) }></span>
		if item.Key != "" {
			@api.DeleteBtn(fmt.Sprintf(PATH+"/%s", item.Key), item.CardId, templ.Attributes{})
		} else {
			<div></div>
		}
	</li>
}

templ DeleteResponse(key string, dto ReceiptExpensesDto) {
	if key != "" {
		<div
			id="expenses-list"
			hx-swap-oob="beforeend"
		>
			<div
				hidden="hidden"
				x-init="
        		$dispatch('event-expense-form-restart-after-deletion', { key: key });
        		$el.remove()
        		"
			></div>
		</div>
	}
	if dto.IsTherePercentage {
		@ReserveFundExpensesView(dto.ReserveFundExpenses)
	}
	@ExpenseTotalsView(dto.Totals)
}

templ FormResponseView(res FormResponse) {
	<div
		data-response-err={ res.ErrorStr }
		x-init="
 		  errMsg = $el.getAttribute('data-response-err');

 		if (errMsg === '') {
 		  $dispatch('event-expense-form-reset');
 		 }
 		"
	></div>
	if res.Item != nil {
		if res.Item.isUpdate != nil {
			if *res.Item.isUpdate {
				@ItemView(*res.Item)
			} else {
				<div id="expenses-list" hx-swap-oob="beforeend">
					@ItemView(*res.Item)
				</div>
			}
		}
	}
	if res.ReceiptExpensesDto != nil {
		@DeleteResponse("", *res.ReceiptExpensesDto)
	}
}

templ ExpenseTotalsView(dto ExpenseTotals) {
	<div
		id="expense-totals"
		hx-swap-oob="innerHTML"
	>
		<div
			data-counter={ fmt.Sprint(dto.ExpensesCounter) }
			data-total-common={ util.FormatFloat2(dto.TotalCommon) }
			data-total-un-common={ util.FormatFloat2(dto.TotalUnCommon) }
			data-total-common-plus-reserve={ util.FormatFloat2(dto.TotalCommonPlusReserve) }
			data-total-un-common-plus-reserve={ util.FormatFloat2(dto.TotalUnCommonPlusReserve) }
			x-init="
          counter = parseInt($el.getAttribute('data-counter'));
      		totalCommon = $el.getAttribute('data-total-common');
      		totalUnCommon = $el.getAttribute('data-total-un-common');
      		totalCommonPlusReserve = $el.getAttribute('data-total-common-plus-reserve');
      		totalUnCommonPlusReserve = $el.getAttribute('data-total-un-common-plus-reserve');

      		"
		></div>
	</div>
}

templ ReserveFundExpensesView(reserveFundExpenses []Item) {
	<div id="expenses-reserve-funds-list" hx-swap-oob="innerHTML">
		for _, item := range reserveFundExpenses {
			if item.UpdateParams == nil {
				@ItemView(item)
			}
		}
	</div>
}
