package buildings

import (
	"fmt"
	"kyotaidoshin/api"
	"kyotaidoshin/reserveFunds"
)

templ Search(res TableResponse) {
	for _, item := range res.Results {
		<li
			id={ item.CardId }
			class="fade-me-in fade-me-out"
		>
			<div class="flex flex-col gap-2">
				<span>{ fmt.Sprint(item.Item.ID) }</span>
				<span>{ fmt.Sprint(item.Item.Name) }</span>
				<span>{ fmt.Sprint(item.Item.Rif) }</span>
			</div>
			<div class="flex flex-col gap-2">
				<span>
					<span x-text="$t('main-buildings-main-currency')"></span>:
					<span>{ fmt.Sprint(item.Item.MainCurrency) }</span>
				</span>
				<span>
					<span x-text="$t('main-buildings-debt-currency')"></span>:
					<span>{ fmt.Sprint(item.Item.DebtCurrency) }</span>
				</span>
				<span>
					<span x-text="$t('main-buildings-show-currencies-amount-pay')"></span>:
					<span>{ fmt.Sprint(item.Item.CurrenciesToShowAmountToPay) }</span>
				</span>
			</div>
			<div class="flex flex-col gap-2 justify-center items-center text-center">
				if item.Item.FixedPay && item.Item.FixedPayAmount != 0 {
					<span class="flex flex-row">
						<span x-text="$t('main-buildings-fixed-pay')"></span>
						<span>:&nbsp;</span>
						<span>{ fmt.Sprint(item.Item.FixedPayAmount) }</span>
					</span>
				}
				@api.Badge(item.Item.RoundUpPayments) {
					<span x-text="$t('main-buildings-round-up-payments')"></span>
				}
			</div>
			<div class="flex flex-col gap-2 justify-center items-center text-center">
				<span class="flex flex-row">
					<span x-text="$t('main-title-apartments')"></span>
					<span>:&nbsp;</span>
					<span>{ fmt.Sprint(item.Item.AptCount) }</span>
				</span>
				<span class="flex flex-row">
					<span x-text="$t('main-buildings-email-config')"></span>
					<span>:&nbsp;</span>
					<span>{ fmt.Sprint(item.Item.EmailConfig) }</span>
				</span>
			</div>
			<span
				data-date={ fmt.Sprint(item.CreatedAt) }
				x-init="
      					$el.innerHTML = new Date(parseInt($el.getAttribute('data-date')))
                                            //.toLocaleDateString()
                                           .toLocaleString()
                                           "
			></span>
			<div class="flex flex-row flex-wrap gap-2 justify-center items-center">
				<a href={ templ.URL(fmt.Sprintf("/buildings/edit/%s", item.Key)) }>
					<button
						type="button"
						class="whitespace-nowrap bg-transparent rounded-full border border-secondary p-1 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-secondary-dark dark:text-secondary-dark dark:focus-visible:outline-secondary-dark"
					>
						<svg x-bind:data-src="editIconUrl" data-cache="21600" class="h-6 w-6"></svg>
					</button>
				</a>
				@api.DeleteBtn(fmt.Sprintf(_PATH+"/%s", item.Key), item.CardId, templ.Attributes{})
			</div>
		</li>
	}
	if res.NextPageUrl != "" {
		@api.NextPageLi(res.NextPageUrl, templ.Attributes{})
	}
	@CountersView(res.Counters)
}

templ CountersView(counters Counters) {
	<div
		id="buildings-counters"
		hidden="hidden"
		hx-swap-oob="true"
		data-total-count={ fmt.Sprint(counters.TotalCount) }
		if counters.QueryCount != nil {
			data-query-count={ fmt.Sprint(*counters.QueryCount) }
		}
		x-init="
	total = $el.getAttribute('data-total-count');
	query = $el.getAttribute('data-query-count');
	"
	></div>
}

templ FormView(dto FormDto) {
	@api.CSRF()
	<div x-init={ fmt.Sprintf("open = true; currencies = %s", dto.currencies) }></div>
	if dto.key != nil {
		<input type="hidden" name="key" value={ *dto.key }/>
	}
	if dto.building != nil {
		<div
			hidden="hidden"
			data-building-id={ fmt.Sprint(dto.building.ID) }
			data-building-name={ dto.building.Name }
			data-building-rif={ dto.building.Rif }
			data-building-main-currency={ dto.building.MainCurrency }
			data-building-debt-currency={ dto.building.DebtCurrency }
			data-building-currencies-to-show-amount-to-pay={ dto.currenciesToShowAmountToPay }
			data-building-fixed-pay={ fmt.Sprint(dto.building.FixedPay) }
			data-building-fixed-pay-amount={ fmt.Sprint(dto.building.FixedPayAmount) }
			data-building-round-up-payments={ fmt.Sprint(dto.building.RoundUpPayments) }
			data-building-email-config={ dto.building.EmailConfig }
			x-init="
	isEdit = true;
	id = $el.getAttribute('data-building-id');
	name = $el.getAttribute('data-building-name');
  rif = $el.getAttribute('data-building-rif');
  mainCurrency = $el.getAttribute('data-building-main-currency');
  debtCurrency = $el.getAttribute('data-building-debt-currency');
  currenciesToShowAmountToPay = $el.getAttribute('data-building-currencies-to-show-amount-to-pay');
  fixedPay = 'true' === $el.getAttribute('data-building-fixed-pay');
  fixedPayAmount = $el.getAttribute('data-building-fixed-pay-amount');
  roundUpPayments = 'true' === $el.getAttribute('data-building-round-up-payments');
  emailConfig = $el.getAttribute('data-building-email-config');

	"
		></div>
		@reserveFunds.FormView(dto.reserveFundFormDto)
	}
	<div id="emailConfigSelect" hx-swap-oob="innerHTML">
		for _,emailConfig := range dto.emailConfigs {
			<option value={ emailConfig.key }>{ emailConfig.id } { emailConfig.email }</option>
		}
	</div>
}

templ FormResponseView(res FormResponse) {
	<div
		data-response-err={ res.errorStr }
		x-init="
errMsg = $el.getAttribute('data-response-err');

if (errMsg === '') {
let form = $el.closest('form')
form.classList.add('border', 'border-success');
await sleep(3000);
form.classList.remove('border', 'border-success');
}

"
	></div>
}
