package apartments

import (
	"fmt"
	"kyotaidoshin/api"
)

templ Search(res TableResponse) {
	for _, item := range res.Results {
		<li
			id={ item.CardId }
		>
			<span>{ item.Item.BuildingID }</span>
			<span>{ item.Item.Number }</span>
			<span>{ item.Item.Name }</span>
			<span>{ fmt.Sprint(item.Item.Aliquot) }</span>
			<div class="flex flex-col gap-1 justify-center items-center text-center">
				for _,email := range item.Emails {
					<span>{ email }</span>
				}
			</div>
			@api.DeleteBtn(fmt.Sprintf(_PATH+"/%s", item.Key), item.CardId, templ.Attributes{})
		</li>
	}
	if res.NextPageUrl != "" {
		@api.NextPageLi(res.NextPageUrl, templ.Attributes{
			"hx-include": "[name='building_input'],[name='apt_search_input']"})
	}
	@CountersView(res.Counters)
}

templ CountersView(counters Counters) {
	<div
		id="apartments-counters"
		hidden="hidden"
		hx-swap-oob="true"
		data-total-count={ fmt.Sprint(counters.TotalCount) }
		if counters.QueryCount != nil {
			data-query-count={ fmt.Sprint(*counters.QueryCount) }
		}
		x-init="
	total = $el.getAttribute('data-total-count');
	query = $el.getAttribute('data-query-count');
	"
	></div>
}

templ uploadBackupForm(url string, values map[string]string) {
	<form
		id="apartments-backup-file-uploader"
		class="whitespace-nowrap bg-transparent rounded-radius border border-secondary px-4 py-2 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-secondary-dark dark:text-secondary-dark dark:focus-visible:outline-secondary-dark disabled:opacity-75 disabled:cursor-not-allowed"
		hx-post={ url }
		hx-encoding="multipart/form-data"
		hx-disabled-elt="this, #apartments-backup-file-uploader * > input:not([disabled]), #apartments-backup-file-uploader * > label:not([disabled])"
		hx-swap="outerHTML"
		hx-trigger="send-file"
		hx-indicator=".htmx-indicator"
		x-data="{ file: ''}"
		x-init="$watch('file', (value) => {
            if (value) {
              $el.dispatchEvent(new CustomEvent('send-file'));
            }
          })
     "
	>
		for k, v := range values {
			<input type="hidden" name={ k } value={ v }/>
		}
		<label
			class="flex flex-row gap-0"
			x-data="{ filename: ''}"
		>
			<span>main.actions.upload.backup</span>
			<span x-show="filename !== ''">:&nbsp;</span>
			<span
				x-bind:class="filename === '' ? 'hidden' : ''"
				x-text="filename"
				x-init="$watch('file', (value) => {
            if (value && value.length > 0) {
              filename = $el.nextElementSibling.files[0].name;
             } else {
              filename = '';
             }
          })"
			></span>
			<input
				class="hidden"
				type="file"
				accept=".json.gz"
				name="file"
				x-model="file"
			/>
		</label>
	</form>
}

templ uploadBackupResponse(inserted int64) {
	<button
		disabled
		type="button"
		class="inline-flex items-center gap-2 whitespace-nowrap bg-transparent rounded-radius border border-secondary px-4 py-2 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-secondary-dark dark:text-secondary-dark dark:focus-visible:outline-secondary-dark"
		hx-get="/api/apartments/uploadBackupForm"
		hx-trigger="load delay:2s"
		hx-swap="outerHTML"
		if inserted > 0 {
			x-init="sendEvent('apartments-updater', 'update-apartments')"
		}
	>
		<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="size-5 animate-spin motion-reduce:animate-none fill-on-secondary dark:fill-on-secondary-dark">
			<path opacity="0.25" d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z"></path>
			<path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z"></path>
		</svg>
		<div class="inline-flex">
			<span x-text="$t('main-description-inserted')"></span>
			<span>:&nbsp;</span>
			<span>{ fmt.Sprint(inserted) }</span>
		</div>
	</button>
}

templ buildingIdsView(ids string) {
  <div

 x-init={ fmt.Sprintf("buildings = %s", ids)}
  >

  </div>
}