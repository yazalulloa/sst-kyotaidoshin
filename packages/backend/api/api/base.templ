package api

import "log"
import "fmt"

templ Base() {
	<!DOCTYPE html>
	<html lang="en" data-theme="dark">
		<head>
			<meta charset="utf-8"/>
			<meta name="viewport" content="width=device-width,initial-scale=1"/>
			<title>Kyotaidoshin</title>
			<link href="https://cdn.jsdelivr.net/npm/daisyui@4.12.23/dist/full.min.css" rel="stylesheet" type="text/css"/>
			<script defer src="https://cdn.tailwindcss.com"></script>
			<script defer src="https://unpkg.com/htmx.org@2.0.4" integrity="sha384-HGfztofotfshcF7+8n44JQL2oJmowVChPTg48S+jvZoztPfvwD79OC/LTtG6dMp+" crossorigin="anonymous"></script>
			<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
			<style>
			.htmx-indicator {
        opacity: 0;
        transition: opacity 100ms ease-in;
      }

      .htmx-request .htmx-indicator {
        opacity: 1
      }

      .htmx-request.htmx-indicator {
        opacity: 1
      }
			</style>
		</head>
		<body class="bg-gray-300">
			<header class="sticky top-0 flex flex-col gap-0 shadow z-11 bg-base-100">
				<progress class="h-1 w-full htmx-indicator progress"></progress>
			</header>
			<main class="w-full mx-auto p-4">
				{ children... }
			</main>
		</body>
	</html>
}

templ CSRF() {
	if !IsDevMode() {
		{{ token := ctx.Value("gorilla.csrf.Token") }}
		if token == nil {
			{{ log.Println("no csrf token") }}
		} else {
			<input type="hidden" name={ CsrfInputName } value={ ctx.Value("gorilla.csrf.Token").(string) }/>
		}
	}
}

templ KeyInput(key string) {
	<input type="hidden" name="key" value={ key }/>
}

templ NextPageLi(nextUrl string, attrs templ.Attributes) {
	<div
		class="next-page-element"
		hx-get={ nextUrl }
		hx-trigger="revealed, intersect"
		hx-target="this"
		hx-indicator=".htmx-indicator"
		hx-swap="outerHTML"
		{ attrs... }
	>
		<svg x-bind:data-src="nextPageIcon" data-cache="21600" class="h-4 w-4"></svg>
	</div>
}

templ DeleteBtn(deleteUrl string, cardIdRef string, attrs templ.Attributes) {
	<div class="flex justify-center">
		<button
			type="button"
			class="whitespace-nowrap bg-transparent rounded-full border border-danger p-1 text-sm font-medium tracking-wide text-danger transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-danger active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-danger dark:text-danger dark:focus-visible:outline-danger"
			if !IsDevMode() {
				hx-headers={ CrsfHeaders(ctx) }
			}
			hx-delete={ deleteUrl }
			hx-target={ "#" + cardIdRef }
			hx-indicator=".htmx-indicator"
			hx-disabled-elt="this"
			hx-trigger="mousedown"
			hx-swap="delete swap:300ms"
			{ attrs... }
		>
			<svg x-bind:data-src="deleteIconUrl" data-cache="21600" class="h-6 w-6"></svg>
		</button>
	</div>
}

templ BackBtn(backUrl string) {
	<button
		class="whitespace-nowrap bg-transparent rounded-full border border-secondary p-1 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-secondary-dark dark:text-secondary-dark dark:focus-visible:outline-secondary-dark"
		hx-get={ backUrl }
		hx-disabled-elt="this"
		hx-indicator=".htmx-indicator"
		hx-swap="none"
		todo-hx-push-url="true"
		hx-trigger="click"
	>
		<svg x-bind:data-src="backBtnIcon" data-cache="21600" class="h-4 w-4"></svg>
	</button>
}

templ UploadBackupForm(params UploadBackupParams) {
	<form
		id="backup-file-uploader"
		class="whitespace-nowrap bg-transparent rounded-radius border border-secondary px-4 py-2 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-secondary-dark dark:text-secondary-dark dark:focus-visible:outline-secondary-dark disabled:opacity-75 disabled:cursor-not-allowed"
		hx-post={ params.Url }
		hx-encoding="multipart/form-data"
		hx-disabled-elt="this, #backup-file-uploader * > input:not([disabled]), #backup-file-uploader * > label:not([disabled])"
		hx-swap="outerHTML"
		hx-trigger="send-file"
		hx-indicator=".htmx-indicator"
		x-data="{ file: ''}"
		x-init="$watch('file', (value) => {
            if (value) {
              $el.dispatchEvent(new CustomEvent('send-file'));
            }
          })
     "
	>
		for k, v := range params.Values {
			<input type="hidden" name={ k } value={ v }/>
		}
		<label
			class="flex flex-row gap-0"
			x-data="{ filename: ''}"
		>
			<span x-text="$t('main-action-upload-backup')"></span>
			<span x-show="filename !== ''">:&nbsp;</span>
			<span
				x-bind:class="filename === '' ? 'hidden' : ''"
				x-text="filename"
				x-init="$watch('file', (value) => {
            if (value && value.length > 0) {
              filename = $el.nextElementSibling.files[0].name;
             } else {
              filename = '';
             }
          })"
			></span>
			<input
				class="hidden"
				type="file"
				accept=".json.gz"
				name="file"
				x-model="file"
			/>
		</label>
	</form>
}

templ UploadBackupResponse(inserted int64, formUrl string, idUpdater string, event string) {
	<button
		disabled
		type="button"
		class="inline-flex items-center gap-2 whitespace-nowrap bg-transparent rounded-radius border border-secondary px-4 py-2 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed dark:border-secondary-dark dark:text-secondary-dark dark:focus-visible:outline-secondary-dark"
		hx-get={ formUrl }
		hx-trigger="load delay:2s"
		hx-swap="outerHTML"
		if inserted > 0 {
			x-init={ fmt.Sprintf("sendEvent('%s', '%s')", idUpdater, event) }
		}
	>
		<svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" class="size-5 animate-spin motion-reduce:animate-none fill-on-secondary dark:fill-on-secondary-dark">
			<path opacity="0.25" d="M12,1A11,11,0,1,0,23,12,11,11,0,0,0,12,1Zm0,19a8,8,0,1,1,8-8A8,8,0,0,1,12,20Z"></path>
			<path d="M10.14,1.16a11,11,0,0,0-9,8.92A1.59,1.59,0,0,0,2.46,12,1.52,1.52,0,0,0,4.11,10.7a8,8,0,0,1,6.66-6.61A1.42,1.42,0,0,0,12,2.69h0A1.57,1.57,0,0,0,10.14,1.16Z"></path>
		</svg>
		<div class="inline-flex">
			<span x-text="$t('main-description-inserted')"></span>
			<span>:&nbsp;</span>
			<span>{ fmt.Sprint(inserted) }</span>
		</div>
	</button>
}

templ initView() {
}

templ RefreshView(url string) {
	<meta http-equiv="refresh" content={ fmt.Sprintf("0; url=%s", url) }/>
}

templ Badge(condition bool) {
	<div
		class={ "peer rounded-radius w-fit border px-2 py-1 text-xs font-medium tracking-wide ",
    templ.KV("border-success bg-success text-on-success dark:border-success dark:bg-success dark:text-on-success", condition),
    templ.KV("border-danger bg-danger text-on-danger dark:border-danger dark:bg-danger dark:text-on-danger", !condition) }
	>
		{ children... }
	</div>
}

templ BadgeIndicator(condition bool, badge string) {
	<span
		class={
			"w-fit inline-flex overflow-hidden rounded-radius border bg-surface text-xs font-medium dark:bg-surface-dark",
			templ.KV("border-success dark:border-success text-success dark:text-success", condition),
			templ.KV("border-danger dark:border-danger text-danger dark:text-danger", !condition),
		}
	>
		<span
			class={
				"flex items-center gap-1 px-2 py-1",
				templ.KV("bg-success/10 dark:bg-success/10", condition),
				templ.KV("bg-danger/10 dark:bg-danger/10", !condition),
			}
		>
			<span
				class={
					"size-1.5 rounded-full",
					templ.KV("bg-success dark:bg-success", condition),
					templ.KV("bg-danger dark:bg-danger", !condition),
				}
			></span>
			{ badge }
		</span>
	</span>
}

templ BadgeIndicatorWithTooltip(condition bool, tooltipId string, badge templ.Component, tooltip templ.Component) {
	<div class="relative w-fit">
		<span
			if tooltipId !="" {
				aria-describedby={ tooltipId }
			}
			class={
				"peer w-fit inline-flex overflow-hidden rounded-radius border bg-surface text-xs font-medium dark:bg-surface-dark tracking-wide focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary dark:focus-visible:outline-primary-dark",
				templ.KV("border-success dark:border-success text-success dark:text-success", condition),
				templ.KV("border-danger dark:border-danger text-danger dark:text-danger", !condition),
			}
		>
			<span
				class={
					"flex items-center gap-1 px-2 py-1",
					templ.KV("bg-success/10 dark:bg-success/10", condition),
					templ.KV("bg-danger/10 dark:bg-danger/10", !condition),
				}
			>
				<span
					class={
						"size-1.5 rounded-full",
						templ.KV("bg-success dark:bg-success", condition),
						templ.KV("bg-danger dark:bg-danger", !condition),
					}
				></span>
				@badge
			</span>
		</span>
		if (tooltipId != "") {
			@tooltip
		}
	</div>
}

templ Tooltip(id string, value templ.Component) {
	<div
		id={ id }
		class="absolute -bottom-9 left-1/2 -translate-x-1/2 z-10 whitespace-nowrap rounded-sm bg-surface-dark px-2 py-1 text-center text-sm text-on-surface-dark-strong opacity-0 transition-all ease-out peer-hover:opacity-100 peer-focus:opacity-100 dark:bg-surface dark:text-on-surface-strong"
		role="tooltip"
	>
		@value
	</div>
}

templ SpanFormatDate(dataDate string) {
	<span
		data-date={ dataDate }
		x-text="FormatDate($el.getAttribute('data-date'))"
	></span>
}

templ SpanWitX_Text(text string) {
	if text != "" {
		<span x-text={ text }></span>
	}
}

templ EmptyDiv() {
	<div></div>
}

templ SpanFormatCurrency(amount float64, currency string) {
	<span class="text-end" x-text={ fmt.Sprintf("FormatCurrency(parseFloat(%f), '%s')", amount, currency) }></span>
}
