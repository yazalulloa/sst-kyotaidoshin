//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var ReserveFunds = newReserveFundsTable("", "reserve_funds", "")

type reserveFundsTable struct {
	sqlite.Table

	// Columns
	ID            sqlite.ColumnInteger
	BuildingID    sqlite.ColumnString
	Name          sqlite.ColumnString
	Fund          sqlite.ColumnFloat
	Expense       sqlite.ColumnFloat
	Pay           sqlite.ColumnFloat
	Active        sqlite.ColumnBool
	Type          sqlite.ColumnString
	ExpenseType   sqlite.ColumnString
	AddToExpenses sqlite.ColumnBool
	CreatedAt     sqlite.ColumnTimestamp
	UpdatedAt     sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ReserveFundsTable struct {
	reserveFundsTable

	EXCLUDED reserveFundsTable
}

// AS creates new ReserveFundsTable with assigned alias
func (a ReserveFundsTable) AS(alias string) *ReserveFundsTable {
	return newReserveFundsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ReserveFundsTable with assigned schema name
func (a ReserveFundsTable) FromSchema(schemaName string) *ReserveFundsTable {
	return newReserveFundsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ReserveFundsTable with assigned table prefix
func (a ReserveFundsTable) WithPrefix(prefix string) *ReserveFundsTable {
	return newReserveFundsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ReserveFundsTable with assigned table suffix
func (a ReserveFundsTable) WithSuffix(suffix string) *ReserveFundsTable {
	return newReserveFundsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newReserveFundsTable(schemaName, tableName, alias string) *ReserveFundsTable {
	return &ReserveFundsTable{
		reserveFundsTable: newReserveFundsTableImpl(schemaName, tableName, alias),
		EXCLUDED:          newReserveFundsTableImpl("", "excluded", ""),
	}
}

func newReserveFundsTableImpl(schemaName, tableName, alias string) reserveFundsTable {
	var (
		IDColumn            = sqlite.IntegerColumn("id")
		BuildingIDColumn    = sqlite.StringColumn("building_id")
		NameColumn          = sqlite.StringColumn("name")
		FundColumn          = sqlite.FloatColumn("fund")
		ExpenseColumn       = sqlite.FloatColumn("expense")
		PayColumn           = sqlite.FloatColumn("pay")
		ActiveColumn        = sqlite.BoolColumn("active")
		TypeColumn          = sqlite.StringColumn("type")
		ExpenseTypeColumn   = sqlite.StringColumn("expense_type")
		AddToExpensesColumn = sqlite.BoolColumn("add_to_expenses")
		CreatedAtColumn     = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn     = sqlite.TimestampColumn("updated_at")
		allColumns          = sqlite.ColumnList{IDColumn, BuildingIDColumn, NameColumn, FundColumn, ExpenseColumn, PayColumn, ActiveColumn, TypeColumn, ExpenseTypeColumn, AddToExpensesColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns      = sqlite.ColumnList{BuildingIDColumn, NameColumn, FundColumn, ExpenseColumn, PayColumn, ActiveColumn, TypeColumn, ExpenseTypeColumn, AddToExpensesColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return reserveFundsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:            IDColumn,
		BuildingID:    BuildingIDColumn,
		Name:          NameColumn,
		Fund:          FundColumn,
		Expense:       ExpenseColumn,
		Pay:           PayColumn,
		Active:        ActiveColumn,
		Type:          TypeColumn,
		ExpenseType:   ExpenseTypeColumn,
		AddToExpenses: AddToExpensesColumn,
		CreatedAt:     CreatedAtColumn,
		UpdatedAt:     UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
