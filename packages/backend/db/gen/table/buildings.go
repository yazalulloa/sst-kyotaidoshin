//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Buildings = newBuildingsTable("", "buildings", "")

type buildingsTable struct {
	sqlite.Table

	// Columns
	ID                          sqlite.ColumnString
	Name                        sqlite.ColumnString
	Rif                         sqlite.ColumnString
	MainCurrency                sqlite.ColumnString
	DebtCurrency                sqlite.ColumnString
	CurrenciesToShowAmountToPay sqlite.ColumnString
	DebtsCurrenciesToShow       sqlite.ColumnString
	FixedPay                    sqlite.ColumnBool
	FixedPayAmount              sqlite.ColumnFloat
	RoundUpPayments             sqlite.ColumnBool
	EmailConfig                 sqlite.ColumnString
	CreatedAt                   sqlite.ColumnTimestamp
	UpdatedAt                   sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type BuildingsTable struct {
	buildingsTable

	EXCLUDED buildingsTable
}

// AS creates new BuildingsTable with assigned alias
func (a BuildingsTable) AS(alias string) *BuildingsTable {
	return newBuildingsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BuildingsTable with assigned schema name
func (a BuildingsTable) FromSchema(schemaName string) *BuildingsTable {
	return newBuildingsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BuildingsTable with assigned table prefix
func (a BuildingsTable) WithPrefix(prefix string) *BuildingsTable {
	return newBuildingsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BuildingsTable with assigned table suffix
func (a BuildingsTable) WithSuffix(suffix string) *BuildingsTable {
	return newBuildingsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBuildingsTable(schemaName, tableName, alias string) *BuildingsTable {
	return &BuildingsTable{
		buildingsTable: newBuildingsTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newBuildingsTableImpl("", "excluded", ""),
	}
}

func newBuildingsTableImpl(schemaName, tableName, alias string) buildingsTable {
	var (
		IDColumn                          = sqlite.StringColumn("id")
		NameColumn                        = sqlite.StringColumn("name")
		RifColumn                         = sqlite.StringColumn("rif")
		MainCurrencyColumn                = sqlite.StringColumn("main_currency")
		DebtCurrencyColumn                = sqlite.StringColumn("debt_currency")
		CurrenciesToShowAmountToPayColumn = sqlite.StringColumn("currencies_to_show_amount_to_pay")
		DebtsCurrenciesToShowColumn       = sqlite.StringColumn("debts_currencies_to_show")
		FixedPayColumn                    = sqlite.BoolColumn("fixed_pay")
		FixedPayAmountColumn              = sqlite.FloatColumn("fixed_pay_amount")
		RoundUpPaymentsColumn             = sqlite.BoolColumn("round_up_payments")
		EmailConfigColumn                 = sqlite.StringColumn("email_config")
		CreatedAtColumn                   = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn                   = sqlite.TimestampColumn("updated_at")
		allColumns                        = sqlite.ColumnList{IDColumn, NameColumn, RifColumn, MainCurrencyColumn, DebtCurrencyColumn, CurrenciesToShowAmountToPayColumn, DebtsCurrenciesToShowColumn, FixedPayColumn, FixedPayAmountColumn, RoundUpPaymentsColumn, EmailConfigColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns                    = sqlite.ColumnList{NameColumn, RifColumn, MainCurrencyColumn, DebtCurrencyColumn, CurrenciesToShowAmountToPayColumn, DebtsCurrenciesToShowColumn, FixedPayColumn, FixedPayAmountColumn, RoundUpPaymentsColumn, EmailConfigColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return buildingsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:                          IDColumn,
		Name:                        NameColumn,
		Rif:                         RifColumn,
		MainCurrency:                MainCurrencyColumn,
		DebtCurrency:                DebtCurrencyColumn,
		CurrenciesToShowAmountToPay: CurrenciesToShowAmountToPayColumn,
		DebtsCurrenciesToShow:       DebtsCurrenciesToShowColumn,
		FixedPay:                    FixedPayColumn,
		FixedPayAmount:              FixedPayAmountColumn,
		RoundUpPayments:             RoundUpPaymentsColumn,
		EmailConfig:                 EmailConfigColumn,
		CreatedAt:                   CreatedAtColumn,
		UpdatedAt:                   UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
