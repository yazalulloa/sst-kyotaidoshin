//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Apartments = newApartmentsTable("", "apartments", "")

type apartmentsTable struct {
	sqlite.Table

	// Columns
	BuildingID sqlite.ColumnString
	Number     sqlite.ColumnString
	Name       sqlite.ColumnString
	IDDoc      sqlite.ColumnString
	Aliquot    sqlite.ColumnFloat
	Emails     sqlite.ColumnString
	CreatedAt  sqlite.ColumnTimestamp
	UpdatedAt  sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ApartmentsTable struct {
	apartmentsTable

	EXCLUDED apartmentsTable
}

// AS creates new ApartmentsTable with assigned alias
func (a ApartmentsTable) AS(alias string) *ApartmentsTable {
	return newApartmentsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ApartmentsTable with assigned schema name
func (a ApartmentsTable) FromSchema(schemaName string) *ApartmentsTable {
	return newApartmentsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ApartmentsTable with assigned table prefix
func (a ApartmentsTable) WithPrefix(prefix string) *ApartmentsTable {
	return newApartmentsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ApartmentsTable with assigned table suffix
func (a ApartmentsTable) WithSuffix(suffix string) *ApartmentsTable {
	return newApartmentsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newApartmentsTable(schemaName, tableName, alias string) *ApartmentsTable {
	return &ApartmentsTable{
		apartmentsTable: newApartmentsTableImpl(schemaName, tableName, alias),
		EXCLUDED:        newApartmentsTableImpl("", "excluded", ""),
	}
}

func newApartmentsTableImpl(schemaName, tableName, alias string) apartmentsTable {
	var (
		BuildingIDColumn = sqlite.StringColumn("building_id")
		NumberColumn     = sqlite.StringColumn("number")
		NameColumn       = sqlite.StringColumn("name")
		IDDocColumn      = sqlite.StringColumn("id_doc")
		AliquotColumn    = sqlite.FloatColumn("aliquot")
		EmailsColumn     = sqlite.StringColumn("emails")
		CreatedAtColumn  = sqlite.TimestampColumn("created_at")
		UpdatedAtColumn  = sqlite.TimestampColumn("updated_at")
		allColumns       = sqlite.ColumnList{BuildingIDColumn, NumberColumn, NameColumn, IDDocColumn, AliquotColumn, EmailsColumn, CreatedAtColumn, UpdatedAtColumn}
		mutableColumns   = sqlite.ColumnList{NameColumn, IDDocColumn, AliquotColumn, EmailsColumn, CreatedAtColumn, UpdatedAtColumn}
	)

	return apartmentsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		BuildingID: BuildingIDColumn,
		Number:     NumberColumn,
		Name:       NameColumn,
		IDDoc:      IDDocColumn,
		Aliquot:    AliquotColumn,
		Emails:     EmailsColumn,
		CreatedAt:  CreatedAtColumn,
		UpdatedAt:  UpdatedAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
