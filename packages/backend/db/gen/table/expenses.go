//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Expenses = newExpensesTable("", "expenses", "")

type expensesTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnInteger
	BuildingID  sqlite.ColumnString
	ReceiptID   sqlite.ColumnInteger
	Description sqlite.ColumnString
	Amount      sqlite.ColumnFloat
	Currency    sqlite.ColumnString
	ReserveFund sqlite.ColumnBool
	Type        sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type ExpensesTable struct {
	expensesTable

	EXCLUDED expensesTable
}

// AS creates new ExpensesTable with assigned alias
func (a ExpensesTable) AS(alias string) *ExpensesTable {
	return newExpensesTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new ExpensesTable with assigned schema name
func (a ExpensesTable) FromSchema(schemaName string) *ExpensesTable {
	return newExpensesTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new ExpensesTable with assigned table prefix
func (a ExpensesTable) WithPrefix(prefix string) *ExpensesTable {
	return newExpensesTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new ExpensesTable with assigned table suffix
func (a ExpensesTable) WithSuffix(suffix string) *ExpensesTable {
	return newExpensesTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newExpensesTable(schemaName, tableName, alias string) *ExpensesTable {
	return &ExpensesTable{
		expensesTable: newExpensesTableImpl(schemaName, tableName, alias),
		EXCLUDED:      newExpensesTableImpl("", "excluded", ""),
	}
}

func newExpensesTableImpl(schemaName, tableName, alias string) expensesTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		BuildingIDColumn  = sqlite.StringColumn("building_id")
		ReceiptIDColumn   = sqlite.IntegerColumn("receipt_id")
		DescriptionColumn = sqlite.StringColumn("description")
		AmountColumn      = sqlite.FloatColumn("amount")
		CurrencyColumn    = sqlite.StringColumn("currency")
		ReserveFundColumn = sqlite.BoolColumn("reserve_fund")
		TypeColumn        = sqlite.StringColumn("type")
		allColumns        = sqlite.ColumnList{IDColumn, BuildingIDColumn, ReceiptIDColumn, DescriptionColumn, AmountColumn, CurrencyColumn, ReserveFundColumn, TypeColumn}
		mutableColumns    = sqlite.ColumnList{BuildingIDColumn, ReceiptIDColumn, DescriptionColumn, AmountColumn, CurrencyColumn, ReserveFundColumn, TypeColumn}
	)

	return expensesTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		BuildingID:  BuildingIDColumn,
		ReceiptID:   ReceiptIDColumn,
		Description: DescriptionColumn,
		Amount:      AmountColumn,
		Currency:    CurrencyColumn,
		ReserveFund: ReserveFundColumn,
		Type:        TypeColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
