//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Users = newUsersTable("", "users", "")

type usersTable struct {
	sqlite.Table

	// Columns
	ID          sqlite.ColumnString
	ProviderID  sqlite.ColumnString
	Provider    sqlite.ColumnString
	Email       sqlite.ColumnString
	Username    sqlite.ColumnString
	Name        sqlite.ColumnString
	Picture     sqlite.ColumnString
	Data        sqlite.ColumnString
	CreatedAt   sqlite.ColumnTimestamp
	LastLoginAt sqlite.ColumnTimestamp

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type UsersTable struct {
	usersTable

	EXCLUDED usersTable
}

// AS creates new UsersTable with assigned alias
func (a UsersTable) AS(alias string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new UsersTable with assigned schema name
func (a UsersTable) FromSchema(schemaName string) *UsersTable {
	return newUsersTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new UsersTable with assigned table prefix
func (a UsersTable) WithPrefix(prefix string) *UsersTable {
	return newUsersTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new UsersTable with assigned table suffix
func (a UsersTable) WithSuffix(suffix string) *UsersTable {
	return newUsersTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newUsersTable(schemaName, tableName, alias string) *UsersTable {
	return &UsersTable{
		usersTable: newUsersTableImpl(schemaName, tableName, alias),
		EXCLUDED:   newUsersTableImpl("", "excluded", ""),
	}
}

func newUsersTableImpl(schemaName, tableName, alias string) usersTable {
	var (
		IDColumn          = sqlite.StringColumn("id")
		ProviderIDColumn  = sqlite.StringColumn("provider_id")
		ProviderColumn    = sqlite.StringColumn("provider")
		EmailColumn       = sqlite.StringColumn("email")
		UsernameColumn    = sqlite.StringColumn("username")
		NameColumn        = sqlite.StringColumn("name")
		PictureColumn     = sqlite.StringColumn("picture")
		DataColumn        = sqlite.StringColumn("data")
		CreatedAtColumn   = sqlite.TimestampColumn("created_at")
		LastLoginAtColumn = sqlite.TimestampColumn("last_login_at")
		allColumns        = sqlite.ColumnList{IDColumn, ProviderIDColumn, ProviderColumn, EmailColumn, UsernameColumn, NameColumn, PictureColumn, DataColumn, CreatedAtColumn, LastLoginAtColumn}
		mutableColumns    = sqlite.ColumnList{ProviderIDColumn, ProviderColumn, EmailColumn, UsernameColumn, NameColumn, PictureColumn, DataColumn, CreatedAtColumn, LastLoginAtColumn}
	)

	return usersTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		ProviderID:  ProviderIDColumn,
		Provider:    ProviderColumn,
		Email:       EmailColumn,
		Username:    UsernameColumn,
		Name:        NameColumn,
		Picture:     PictureColumn,
		Data:        DataColumn,
		CreatedAt:   CreatedAtColumn,
		LastLoginAt: LastLoginAtColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
