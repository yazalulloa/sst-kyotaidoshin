package api

import (
	"fmt"
	"github.com/yaz/kyo-repo/internal/util"
	"log"
)

templ CSRF() {
	if !util.IsDevMode() {
		{{ token := ctx.Value("gorilla.csrf.Token") }}
		if token == nil {
			{{ log.Println("no csrf token") }}
		} else {
			<input type="hidden" name={ util.CsrfInputName } value={ ctx.Value("gorilla.csrf.Token").(string) }/>
		}
	}
}

templ KeyInput(key string) {
	<input type="hidden" name="key" value={ key }/>
}

templ NextPageLi(nextUrl string, attrs templ.Attributes) {
	<div
		class="next-page-element"
		hx-get={ nextUrl }
		hx-trigger="revealed, intersect"
		hx-target="this"
		hx-indicator=".htmx-indicator"
		hx-swap="outerHTML"
		{ attrs... }
	>
		<svg x-bind:data-src="nextPageIconUrl" data-cache="21600" class="h-4 w-4"></svg>
	</div>
}

templ DeleteBtn(deleteUrl string, cardIdRef string, attrs templ.Attributes) {
	<div class="flex justify-center">
		<button
			type="button"
			class="btn btn-sm btn-outline btn-error btn-circle"
			if !util.IsDevMode() {
				hx-headers={ util.CrsfHeaders(ctx) }
			}
			hx-delete={ deleteUrl }
			hx-target={ "#" + cardIdRef }
			hx-indicator=".htmx-indicator"
			hx-disabled-elt="this"
			hx-swap="delete swap:300ms"
			@click.stop=""
			{ attrs... }
		>
			<svg x-bind:data-src="deleteIconUrl" data-cache="21600" class="h-6 w-6"></svg>
		</button>
	</div>
}

templ BackBtn(backUrl string) {
	<button
		class="whitespace-nowrap bg-transparent rounded-full border border-secondary p-1 text-sm font-medium tracking-wide text-secondary transition hover:opacity-75 text-center focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-secondary active:opacity-100 active:outline-offset-0 disabled:opacity-75 disabled:cursor-not-allowed"
		hx-get={ backUrl }
		hx-disabled-elt="this"
		hx-indicator=".htmx-indicator"
		hx-swap="none"
		todo-hx-push-url="true"
		hx-trigger="click"
	>
		<svg x-bind:data-src="backBtnIconUrl" data-cache="21600" class="h-4 w-4"></svg>
	</button>
}

templ UploadFormView(params util.UploadBackupParams) {
	<div
		hidden="hidden"
		data-url={ params.Url }
		x-init="url = $el.dataset.url"
	></div>
	for k, v := range params.Values {
		<input type="hidden" name={ k } value={ v }/>
	}
}

templ RefreshView(url string) {
	<meta http-equiv="refresh" content={ fmt.Sprintf("0; url=%s", url) }/>
}

templ AnchorClickInitView(url string) {
	<div>
		<a
			href={ templ.SafeURL(url) }
			x-init="$el.click()"
		></a>
	</div>
}

templ AnchorClickDownloadView(url string) {
	<div>
		<a
			href={ templ.SafeURL(url) }
			x-init="$el.click()"
		></a>
	</div>
}

templ Badge(condition bool) {
	<div
		class={ "peer rounded-(--radius-selector) w-fit border px-2 py-1 text-xs font-medium tracking-wide ",
    templ.KV("border-success bg-success text-on-success", condition),
    templ.KV("border-error bg-error text-on-error", !condition) }
	>
		{ children... }
	</div>
}

templ BadgeIndicator(condition bool, badge string) {
	<span
		class={
			"w-fit inline-flex overflow-hidden rounded-(--radius-selector) border bg-surface text-xs font-medium",
			templ.KV("border-success text-success", condition),
			templ.KV("border-error text-error", !condition),
		}
	>
		<span
			class={
				"flex items-center gap-1 px-2 py-1",
				templ.KV("bg-success/10", condition),
				templ.KV("bg-error/10", !condition),
			}
		>
			<span
				class={
					"size-1.5 rounded-full",
					templ.KV("bg-success", condition),
					templ.KV("bg-error", !condition),
				}
			></span>
			{ badge }
		</span>
	</span>
}

templ BadgeIndicatorWithTooltipV2(condition bool, badge templ.Component, attrs templ.Attributes) {
	<div
		class={
			"w-fit",
			templ.KV("tooltip tooltip-bottom", condition),
		}
		{ attrs... }
	>
		<span
			class={
				"w-fit inline-flex overflow-hidden rounded-(--radius-selector) border text-xs font-medium tracking-wide",
				templ.KV("border-success text-success", condition),
				templ.KV("border-error text-error", !condition),
			}
		>
			<span
				class={
					"flex items-center gap-1 px-2 py-1",
					templ.KV("bg-success/10", condition),
					templ.KV("bg-error/10", !condition),
				}
			>
				<span
					class={
						"size-1.5 rounded-full",
						templ.KV("bg-success", condition),
						templ.KV("bg-error", !condition),
					}
				></span>
				@badge
			</span>
		</span>
	</div>
}

templ BadgeIndicatorWithTooltip(condition bool, tooltipId string, badge templ.Component, tooltip templ.Component) {
	<div class="relative w-fit">
		<span
			if tooltipId !="" {
				aria-describedby={ tooltipId }
			}
			class={
				"peer w-fit inline-flex overflow-hidden rounded-(--radius-selector) border bg-surface text-xs font-medium tracking-wide focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary",
				templ.KV("border-success text-success", condition),
				templ.KV("border-error text-error", !condition),
			}
		>
			<span
				class={
					"flex items-center gap-1 px-2 py-1",
					templ.KV("bg-success/10", condition),
					templ.KV("bg-error/10", !condition),
				}
			>
				<span
					class={
						"size-1.5 rounded-full",
						templ.KV("bg-success", condition),
						templ.KV("bg-error", !condition),
					}
				></span>
				@badge
			</span>
		</span>
		if (tooltipId != "") {
			@tooltip
		}
	</div>
}

templ SpanFormatDate(dataDate string) {
	<span
		data-date={ dataDate }
		class="text-center"
		x-text="FormatDate($el.getAttribute('data-date'))"
	></span>
}

templ SpanWitX_Text(text string) {
	if text != "" {
		<span x-text={ text }></span>
	}
}

templ EmptyDiv() {
	<div></div>
}

templ SpanFormatCurrency(amount float64, currency string) {
	<span class="text-end" x-text={ fmt.Sprintf("FormatCurrency(parseFloat(%f), '%s')", amount, currency) }></span>
}

templ AddComponentIfPerms(component templ.Component, perms ...PERM) {
	if HasPerms(ctx, perms...) {
		@component
	}
}
