//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var TelegramChats = newTelegramChatsTable("", "telegram_chats", "")

type telegramChatsTable struct {
	sqlite.Table

	// Columns
	UserID    sqlite.ColumnString
	ChatID    sqlite.ColumnInteger
	Username  sqlite.ColumnString
	FirstName sqlite.ColumnString
	LastName  sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type TelegramChatsTable struct {
	telegramChatsTable

	EXCLUDED telegramChatsTable
}

// AS creates new TelegramChatsTable with assigned alias
func (a TelegramChatsTable) AS(alias string) *TelegramChatsTable {
	return newTelegramChatsTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TelegramChatsTable with assigned schema name
func (a TelegramChatsTable) FromSchema(schemaName string) *TelegramChatsTable {
	return newTelegramChatsTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TelegramChatsTable with assigned table prefix
func (a TelegramChatsTable) WithPrefix(prefix string) *TelegramChatsTable {
	return newTelegramChatsTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TelegramChatsTable with assigned table suffix
func (a TelegramChatsTable) WithSuffix(suffix string) *TelegramChatsTable {
	return newTelegramChatsTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTelegramChatsTable(schemaName, tableName, alias string) *TelegramChatsTable {
	return &TelegramChatsTable{
		telegramChatsTable: newTelegramChatsTableImpl(schemaName, tableName, alias),
		EXCLUDED:           newTelegramChatsTableImpl("", "excluded", ""),
	}
}

func newTelegramChatsTableImpl(schemaName, tableName, alias string) telegramChatsTable {
	var (
		UserIDColumn    = sqlite.StringColumn("user_id")
		ChatIDColumn    = sqlite.IntegerColumn("chat_id")
		UsernameColumn  = sqlite.StringColumn("username")
		FirstNameColumn = sqlite.StringColumn("first_name")
		LastNameColumn  = sqlite.StringColumn("last_name")
		allColumns      = sqlite.ColumnList{UserIDColumn, ChatIDColumn, UsernameColumn, FirstNameColumn, LastNameColumn}
		mutableColumns  = sqlite.ColumnList{UsernameColumn, FirstNameColumn, LastNameColumn}
	)

	return telegramChatsTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		UserID:    UserIDColumn,
		ChatID:    ChatIDColumn,
		Username:  UsernameColumn,
		FirstName: FirstNameColumn,
		LastName:  LastNameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
